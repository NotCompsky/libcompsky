/*
Copyright (c) 2003-2017 Christopher M. Kohlhoff (chris at kohlhoff dot com) under the Boost v1 license:

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#pragma once

#include <boost/asio.hpp>
#include <boost/array.hpp>
#include <boost/bind.hpp>
#include <boost/noncopyable.hpp>
#include <boost/shared_ptr.hpp>
#include <boost/enable_shared_from_this.hpp>
#include <vector>
#include <compsky/macros/likely.hpp>


// NOTE: RequestHandler must have a function:  void handle_request(boost::array<char, 8192>& req_buffer,  const size_t n_bytes_of_first_req_buffer,  std::vector<boost::asio::const_buffer>& response_buffers);


namespace compsky {
namespace server {

/// Represents a single connection from a client.
template<size_t req_buffer_sz,  class RequestHandler>
class Connection : public boost::enable_shared_from_this<Connection<req_buffer_sz, RequestHandler>>, private boost::noncopyable {
public:
	/// Construct a connection with the given io_context.
	explicit Connection(boost::asio::io_context& _io_context)
	: strand_(_io_context)
	, socket_(_io_context)
	{}

	/// Get the socket associated with the connection.
	boost::asio::ip::tcp::socket& socket(){
		return socket_;
	}

	/// Start the first asynchronous operation for the connection.
	void start(){
		socket_.async_read_some(
			boost::asio::buffer(request_buffer_),
			boost::asio::bind_executor(strand_,
				boost::bind(
					&Connection::handle_read, this->shared_from_this(),
					boost::asio::placeholders::error,
					boost::asio::placeholders::bytes_transferred
				)
			)
		);
	}

private:
	/// Handle completion of a read operation.
	void handle_read(const boost::system::error_code& e,  const std::size_t bytes_transferred){
		if (unlikely(e))
			// If an error occurs then no new asynchronous operations are started, and all shared_ptr references to the connection object will disappear and the object will be destroyed automatically after this handler returns. The connection class's destructor closes the socket.
			return;
		RequestHandler().handle_request(request_buffer_, bytes_transferred, this->response_buffers);
		boost::asio::async_write(
			socket_,
			this->response_buffers,
			boost::asio::bind_executor(
				strand_,
				boost::bind(&Connection::handle_write, this->shared_from_this(), boost::asio::placeholders::error)
			)
		);
	}
	
	void handle_write(const boost::system::error_code& e){
		if (unlikely(e))
			return;
		// Initiate graceful connection closure.
		boost::system::error_code ignored_ec;
		socket_.shutdown(boost::asio::ip::tcp::socket::shutdown_both, ignored_ec);
	}
	
	boost::asio::io_context::strand strand_; // Ensures the connection's handlers are not called concurrently
	boost::asio::ip::tcp::socket socket_;
	boost::array<char, req_buffer_sz> request_buffer_;
	std::vector<boost::asio::const_buffer> response_buffers;
};

} // namespace server
} // namespace compsky
